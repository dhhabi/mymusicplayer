/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.musicplayer.ui;

import com.mpatric.mp3agic.ID3v1;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.apache.commons.io.IOUtils;
import org.musicplayer.model.Song;
import org.musicplayer.service.SongLibraryService;
import org.mymusicplayer.MyPlayer;

/**
 *
 * @author preet
 */
public class PlayerUI extends javax.swing.JFrame {

    /**
     * Creates new form Player
     */
    private boolean playListFlag;
    public static MyPlayer myPlayer = new MyPlayer();
    public static int loop;
    private final DefaultTableModel model = new DefaultTableModel(new String[]{"Id","title","artist","album","length","genre","songPath"},0);
    private TableColumn colmn;
    private static int selectedRow=0;
    
    
    
    
    //private SongsLibraryDao songLibrary = new SongsLibraryDao();
    private SongLibraryService libraryService = new SongLibraryService();
    
    public PlayerUI(boolean flag) {
        initComponents();
        //custome
        this.playListFlag = flag;
         
        this.addWindowListener(new WindowListener() {

            @Override
            public void windowClosing(WindowEvent e) {
                if(playListFlag)
                    setDefaultCloseOperation(HIDE_ON_CLOSE);
                else
                    setDefaultCloseOperation(EXIT_ON_CLOSE);
            }

            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });
        
         
        
        if(playListFlag){
            mainPanel.setVisible(false);
            //setSize(400,500);
        }
              
        initTable();
        initSongLibrary();
        
        //setLayout(new GridLayout(2,2));
        //initDragDrop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablePopupMenu = new javax.swing.JPopupMenu();
        menuItemAddToLibrary = new javax.swing.JMenuItem();
        menuItemDeleteFromLibrary = new javax.swing.JMenuItem();
        lblNowPlaying = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmdPlay = new javax.swing.JButton();
        cmdStop = new javax.swing.JButton();
        cmdPause = new javax.swing.JButton();
        cmdPrevious = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        tableScorllPan = new javax.swing.JScrollPane();
        tableLibrary = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuItemExit = new javax.swing.JMenu();
        menuItemOpen = new javax.swing.JMenuItem();
        menuItemAddSong = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        menuItemAddToLibrary.setText("Add to Library");
        menuItemAddToLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddToLibraryActionPerformed(evt);
            }
        });
        tablePopupMenu.add(menuItemAddToLibrary);

        menuItemDeleteFromLibrary.setText("Delete From Library");
        menuItemDeleteFromLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDeleteFromLibraryActionPerformed(evt);
            }
        });
        tablePopupMenu.add(menuItemDeleteFromLibrary);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music Player");
        setBackground(new java.awt.Color(91, 64, 38));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setType(java.awt.Window.Type.UTILITY);

        lblNowPlaying.setText("**");

        jLabel1.setText("Now Playing:");

        cmdPlay.setText("Play");
        cmdPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPlayActionPerformed(evt);
            }
        });

        cmdStop.setText("Stop");
        cmdStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStopActionPerformed(evt);
            }
        });

        cmdPause.setText("Pause");
        cmdPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPauseActionPerformed(evt);
            }
        });

        cmdPrevious.setText("<<");
        cmdPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviousActionPerformed(evt);
            }
        });

        cmdNext.setText(">>");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTree);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        tableLibrary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableLibrary.setComponentPopupMenu(tablePopupMenu);
        tableLibrary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableLibraryMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableLibraryMouseReleased(evt);
            }
        });
        tableScorllPan.setViewportView(tableLibrary);

        menuItemExit.setText("File");

        menuItemOpen.setText("Open");
        menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenActionPerformed(evt);
            }
        });
        menuItemExit.add(menuItemOpen);

        menuItemAddSong.setText("Add Song to library");
        menuItemAddSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddSongActionPerformed(evt);
            }
        });
        menuItemExit.add(menuItemAddSong);

        jMenuItem2.setText("Delete Song from library");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuItemExit.add(jMenuItem2);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuItemExit.add(jMenuItem1);

        jMenuBar1.add(menuItemExit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(lblNowPlaying, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(cmdStop, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdPrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdPause, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScorllPan, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tableScorllPan, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNowPlaying)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdStop)
                    .addComponent(cmdPlay)
                    .addComponent(cmdPause)
                    .addComponent(cmdPrevious)
                    .addComponent(cmdNext))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStopActionPerformed
        myPlayer.stop();
    }//GEN-LAST:event_cmdStopActionPerformed

    private void cmdPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPlayActionPerformed
        //myPlayer.play("/home/preet/Music/PyarTereDaAsar.mp3");
        myPlayer.resume();
        
    }//GEN-LAST:event_cmdPlayActionPerformed

    private void cmdPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPauseActionPerformed
        myPlayer.pause();
    }//GEN-LAST:event_cmdPauseActionPerformed

    private void tableLibraryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableLibraryMousePressed
        JTable table =(JTable) evt.getSource();
        Point p = evt.getPoint();
        selectedRow = table.rowAtPoint(p);
        int selectedSongId = (int) tableLibrary.getValueAt(selectedRow, 0);
        //System.out.println(selectedRow);
        if (evt.getClickCount() == 2) {
           //Handle double click event
            handleTableDoubleClick(selectedSongId);
           
        }
    }//GEN-LAST:event_tableLibraryMousePressed

    private void tableLibraryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableLibraryMouseReleased
        JTable table =(JTable) evt.getSource();
        Point p = evt.getPoint();
        selectedRow = table.rowAtPoint(p);
        //System.out.println(selectedRow);
    }//GEN-LAST:event_tableLibraryMouseReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenActionPerformed
         FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Mp3 Files", "mp3", "mpeg3");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(fileFilter);
        int returnVal = fileChooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            myPlayer.stop();
            File songFile = fileChooser.getSelectedFile();
                   
            FileInputStream fis;
             try {
                 fis = new FileInputStream(songFile);
                 myPlayer.play(IOUtils.toByteArray(fis));
                 lblNowPlaying.setText(songFile.getName());
                 fis.close();
             } catch (FileNotFoundException ex) {
                 Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
             } catch (IOException ex) {
                 Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
             }
           
         int rowCount = tableLibrary.getRowCount();
         selectedRow = rowCount;    
         addRowToLibraryTable(songFile);
        }
    }//GEN-LAST:event_menuItemOpenActionPerformed

    private void menuItemAddToLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddToLibraryActionPerformed
        
        addSongToLibraryFromFileSystem();
        
    }//GEN-LAST:event_menuItemAddToLibraryActionPerformed

    private void menuItemDeleteFromLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDeleteFromLibraryActionPerformed
      
        int songId = (int)tableLibrary.getValueAt(selectedRow, 0);
        if(songId==0){
            JOptionPane.showMessageDialog(rootPane, "Song not added to library yet");
            
        }else{
            int deletedRows = libraryService.deleteSong(songId);
            if(deletedRows>0){
                DefaultTableModel tableModel = (DefaultTableModel)tableLibrary.getModel();
                tableModel.removeRow(selectedRow);
                JOptionPane.showMessageDialog(rootPane, "Song deleted successfully");
            }
        }
        
      
    }//GEN-LAST:event_menuItemDeleteFromLibraryActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        int rowCount = tableLibrary.getRowCount()-1;
             
        if(selectedRow<rowCount){
            ++selectedRow;
            handleTableDoubleClick((int) tableLibrary.getValueAt(selectedRow, 0)); 
        }else{
            selectedRow = 0;
            handleTableDoubleClick((int) tableLibrary.getValueAt(selectedRow, 0));
        }
        tableLibrary.setRowSelectionInterval(selectedRow, selectedRow);
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviousActionPerformed
        int rowCount = tableLibrary.getRowCount()-1;
         
        if(selectedRow>0){
            --selectedRow;
            handleTableDoubleClick((int) tableLibrary.getValueAt(selectedRow, 0));
            
        }else{
            selectedRow = rowCount;
            handleTableDoubleClick((int) tableLibrary.getValueAt(selectedRow, 0));
        }
    }//GEN-LAST:event_cmdPreviousActionPerformed

    private void menuItemAddSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddSongActionPerformed
        addSongToLibraryFromFileSystem();
    }//GEN-LAST:event_menuItemAddSongActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int songId = (int)tableLibrary.getValueAt(selectedRow, 0);
        if(songId==0){
            JOptionPane.showMessageDialog(rootPane, "Song not added to library yet");
            
        }else{
            int deletedRows = libraryService.deleteSong(songId);
            if(deletedRows>0){
                JOptionPane.showMessageDialog(rootPane, "Song deleted successfully");
                DefaultTableModel tableModel = (DefaultTableModel)tableLibrary.getModel();
                tableModel.removeRow(selectedRow);
            }
        }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayerUI(false).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPause;
    private javax.swing.JButton cmdPlay;
    private javax.swing.JButton cmdPrevious;
    private javax.swing.JButton cmdStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree;
    private javax.swing.JLabel lblNowPlaying;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem menuItemAddSong;
    private javax.swing.JMenuItem menuItemAddToLibrary;
    private javax.swing.JMenuItem menuItemDeleteFromLibrary;
    private javax.swing.JMenu menuItemExit;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JTable tableLibrary;
    private javax.swing.JPopupMenu tablePopupMenu;
    private javax.swing.JScrollPane tableScorllPan;
    // End of variables declaration//GEN-END:variables



    private void initSongLibrary()
    {
     
        List<Object[]> songs = libraryService.getAllSongs();
        for(Object[] song : songs){
            Object[] rowdata = {song[0],song[1],song[2],song[3],song[4],song[5]};
            model.addRow(rowdata);
        }
      
    }
    
    private void addRowToLibraryTable(int songId,String title,String artist,String album, String length,String genre,String songPath){
        DefaultTableModel tableModel = (DefaultTableModel) tableLibrary.getModel();
        Object[] rowdata = {songId,title,artist,album,length,genre,songPath};
        tableModel.addRow(rowdata);
    }
    
    
    private void addRowToLibraryTable(File songFile){
        try {
            String filePath = songFile.getAbsolutePath();
            //System.out.println(filePath);
            Mp3File mp3File = new Mp3File(filePath);
            ID3v1 tags = mp3File.getId3v1Tag();
            addRowToLibraryTable(0,tags.getTitle(), tags.getArtist(), tags.getAlbum(), String.valueOf(mp3File.getLength()),String.valueOf(tags.getGenreDescription()), filePath);
           // tableLibrary.setRowSelectionInterval(tableLibrary.getRowCount()-1, tableLibrary.getRowCount()-1);
        } catch (IOException | UnsupportedTagException | InvalidDataException ex) {
            Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
                 
    }
    
    private void initTable(){
        
      //model = new DefaultTableModel();
      //scroll = new JScrollPane(tableLibrary);
      tableLibrary.setModel(model);
          
      colmn = tableLibrary.getColumnModel().getColumn(0);
      colmn.setMinWidth(0);
      colmn.setMaxWidth(0);
      colmn = tableLibrary.getColumnModel().getColumn(1);
      colmn.setPreferredWidth(150);
      colmn = tableLibrary.getColumnModel().getColumn(6);
      colmn.setMinWidth(0);
      colmn.setMaxWidth(0);
        
        
        
        tableLibrary.setDropTarget(new DropTarget(){
            @Override
            public synchronized void drop(DropTargetDropEvent dtde) {
                Point point = dtde.getLocation();
                int column = tableLibrary.columnAtPoint(point);
                int row = tableLibrary.rowAtPoint(point);
                
                //JOptionPane.showMessageDialog(rootPane, "Inside");
                 handleDropedFile(dtde);
                super.drop(dtde);
            }
        });
        
        tableScorllPan.setDropTarget(new DropTarget(){
            @Override
            public synchronized void drop(DropTargetDropEvent dtde) {
                handleDropedFile(dtde);
            }
        });
    }
    
    
    private void handleDropedFile(DropTargetDropEvent dtde){
        
        try {
                    // handle drop outside current table
                    //JOptionPane.showMessageDialog(rootPane, "Outside");
                    dtde.acceptDrop(DnDConstants.ACTION_LINK);
                    Transferable t = dtde.getTransferable();
                    List fileList = (List)t.getTransferData(DataFlavor.javaFileListFlavor);
                    int rowCount = tableLibrary.getRowCount();
                    selectedRow = rowCount;
                    for(Object file : fileList){
                        File songFile = (File)file;
                        addRowToLibraryTable(songFile);
                    }
                    File firstSongFile = (File)fileList.get(0);
            
            try ( //Play mp3 file here
                    FileInputStream fis = new FileInputStream(firstSongFile)) {
                myPlayer.stop();
                myPlayer.play(IOUtils.toByteArray(fis));
                
                fis.close();
                //super.drop(dtde);
            }
            } catch (UnsupportedFlavorException | IOException ex) {
                    Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    private void handleTableDoubleClick(int selectedSongId){
        if(selectedSongId==0){
                
                File songFile = new File((String) tableLibrary.getValueAt(selectedRow, 6));
                lblNowPlaying.setText((String)tableLibrary.getValueAt(selectedRow, 1));
                try {
                    FileInputStream fis = new FileInputStream(songFile);
                    myPlayer.stop();
                    myPlayer.play(IOUtils.toByteArray(fis));     
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else{
                //Retrive Song from database and then play 
                lblNowPlaying.setText((String)tableLibrary.getValueAt(selectedRow, 1));
                Song song = libraryService.getSong((int) tableLibrary.getValueAt(selectedRow, 0));
                myPlayer.stop();
                myPlayer.play(song.getSong());
            }
    }
    
    
    private void addSongToLibrary(){
        
        int songId = (int)tableLibrary.getValueAt(selectedRow, 0);
        
        if(songId!=0){
            JOptionPane.showMessageDialog(rootPane, "Song already exist in Library");
        }else{
            new Thread(){
            @Override
            public void run( ){
                 String songPath= (String)tableLibrary.getValueAt(selectedRow, 6);
                 int updatedSongRow = selectedRow;
                int id = libraryService.addSong(songPath);
                if(id>0){
                    tableLibrary.setValueAt(id, updatedSongRow, 0);
                    //JOptionPane.showMessageDialog(rootPane, "Song added to library "+id);
                }
                    
            }
        }.start();
            
        }
    }
    
    
    
    
    private void addSongToLibraryFromFileSystem(){
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Mp3 Files", "mp3", "mpeg3");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(fileFilter);
        int returnVal = fileChooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            myPlayer.stop();
            File songFile = fileChooser.getSelectedFile();
                   
            FileInputStream fis;
             try {
                 fis = new FileInputStream(songFile);
                 //myPlayer.play(IOUtils.toByteArray(fis));
                 lblNowPlaying.setText(songFile.getName());
                 fis.close();
             } catch (FileNotFoundException ex) {
                 Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
             } catch (IOException ex) {
                 Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
             }
           
         int rowCount = tableLibrary.getRowCount();
         selectedRow = rowCount;    
         addRowToLibraryTable(songFile);
         addSongToLibrary();
         
        }  
    }
    
}
