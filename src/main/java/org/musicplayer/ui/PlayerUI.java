/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.musicplayer.ui;

import com.mpatric.mp3agic.ID3v1;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.apache.commons.io.IOUtils;
import org.musicplayer.service.SongLibraryService;
import org.mymusicplayer.MyPlayer;

/**
 *
 * @author preet
 */
public class PlayerUI extends javax.swing.JFrame {

    /**
     * Creates new form Player
     */
    MyPlayer myPlayer = new MyPlayer();
    public static int loop;
    
        
    private final DefaultTableModel model = new DefaultTableModel(new String[]{"Id","title","artist","album","length","genre","songPath"},0);
    
    private TableColumn colmn;
    private static int selectedRow;
    
    
    //private SongsLibraryDao songLibrary = new SongsLibraryDao();
    private SongLibraryService libraryService = new SongLibraryService();
    public PlayerUI() {
        initComponents();
        initTable();
        initSongLibrary();
        //initDragDrop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablePopupMenu = new javax.swing.JPopupMenu();
        menuItemAddToLibrary = new javax.swing.JMenuItem();
        menuItemDeleteFromLibrary = new javax.swing.JMenuItem();
        cmdPlay = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lblSongName = new javax.swing.JLabel();
        cmdLoop = new javax.swing.JButton();
        tableScorllPan = new javax.swing.JScrollPane();
        tableLibrary = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuItemExit = new javax.swing.JMenu();
        menuItemOpen = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        menuItemAddToLibrary.setText("Add to Library");
        menuItemAddToLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddToLibraryActionPerformed(evt);
            }
        });
        tablePopupMenu.add(menuItemAddToLibrary);

        menuItemDeleteFromLibrary.setText("Delete From Library");
        menuItemDeleteFromLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDeleteFromLibraryActionPerformed(evt);
            }
        });
        tablePopupMenu.add(menuItemDeleteFromLibrary);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music Player");
        setBackground(new java.awt.Color(91, 64, 38));
        setResizable(false);

        cmdPlay.setText("Play");
        cmdPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPlayActionPerformed(evt);
            }
        });

        jButton1.setText("Stop");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Puase");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        lblSongName.setText("Song :");

        cmdLoop.setText("Loop");
        cmdLoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLoopActionPerformed(evt);
            }
        });

        tableLibrary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableLibrary.setComponentPopupMenu(tablePopupMenu);
        tableLibrary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableLibraryMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableLibraryMouseReleased(evt);
            }
        });
        tableScorllPan.setViewportView(tableLibrary);

        menuItemExit.setText("File");

        menuItemOpen.setText("Open");
        menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenActionPerformed(evt);
            }
        });
        menuItemExit.add(menuItemOpen);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuItemExit.add(jMenuItem1);

        jMenuBar1.add(menuItemExit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSongName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdLoop, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 57, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(tableScorllPan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tableScorllPan, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblSongName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(cmdPlay)
                    .addComponent(jButton2)
                    .addComponent(cmdLoop))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        myPlayer.stop();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmdPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPlayActionPerformed
        //myPlayer.play("/home/preet/Music/PyarTereDaAsar.mp3");
        myPlayer.resume();
    }//GEN-LAST:event_cmdPlayActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        myPlayer.pause();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmdLoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLoopActionPerformed
        switch(loop){
            case 0:
                loop = 1;
                cmdLoop.setText("Loop On");
                break;
            case 1:
                loop = 0;
                cmdLoop.setText("Loop Off");
                break;
        }
    }//GEN-LAST:event_cmdLoopActionPerformed

    private void tableLibraryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableLibraryMousePressed
        JTable table =(JTable) evt.getSource();
        Point p = evt.getPoint();
        selectedRow = table.rowAtPoint(p);
        //System.out.println(selectedRow);
        if (evt.getClickCount() == 2) {
           //Handle double click event
            //System.out.println("Doulbe Click");
        }
    }//GEN-LAST:event_tableLibraryMousePressed

    private void tableLibraryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableLibraryMouseReleased
        JTable table =(JTable) evt.getSource();
        Point p = evt.getPoint();
        selectedRow = table.rowAtPoint(p);
        //System.out.println(selectedRow);
    }//GEN-LAST:event_tableLibraryMouseReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenActionPerformed
         FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Mp3 Files", "mp3", "mpeg3");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(fileFilter);
        int returnVal = fileChooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            myPlayer.stop();
            File songFile = fileChooser.getSelectedFile();
                   
            FileInputStream fis;
             try {
                 fis = new FileInputStream(songFile);
                 myPlayer.play(IOUtils.toByteArray(fis));
                 fis.close();
             } catch (FileNotFoundException ex) {
                 Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
             } catch (IOException ex) {
                 Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
             }
           
         addRowToLibraryTable(songFile);
         
        }
    }//GEN-LAST:event_menuItemOpenActionPerformed

    private void menuItemAddToLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddToLibraryActionPerformed
        
        int songId = (int)tableLibrary.getValueAt(selectedRow, 0);
        
        if(songId!=0){
            JOptionPane.showMessageDialog(rootPane, "Song already exist in Library");
        }else{
            String songPath= (String)tableLibrary.getValueAt(selectedRow, 6);
            JOptionPane.showMessageDialog(rootPane, "Song added to library "+songPath);
        }
        
    }//GEN-LAST:event_menuItemAddToLibraryActionPerformed

    private void menuItemDeleteFromLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDeleteFromLibraryActionPerformed
        //Delete song from table 
    }//GEN-LAST:event_menuItemDeleteFromLibraryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdLoop;
    private javax.swing.JButton cmdPlay;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel lblSongName;
    private javax.swing.JMenuItem menuItemAddToLibrary;
    private javax.swing.JMenuItem menuItemDeleteFromLibrary;
    private javax.swing.JMenu menuItemExit;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JTable tableLibrary;
    private javax.swing.JPopupMenu tablePopupMenu;
    private javax.swing.JScrollPane tableScorllPan;
    // End of variables declaration//GEN-END:variables



    private void initSongLibrary()
    {
     
        List<Object[]> songs = libraryService.getAllSongs();
        for(Object[] song : songs){
            Object[] rowdata = {song[0],song[1],song[2],song[3],song[4],song[5]};
            model.addRow(rowdata);
        }
      
    }
    
    private void addRowToLibraryTable(int songId,String title,String artist,String album, String length,String genre,String songPath){
        DefaultTableModel tableModel = (DefaultTableModel) tableLibrary.getModel();
        Object[] rowdata = {songId,title,artist,album,length,genre,songPath};
        tableModel.addRow(rowdata);
    }
    
    
    private void addRowToLibraryTable(File songFile){
        try {
            String filePath = songFile.getAbsolutePath();
            System.out.println(filePath);
            Mp3File mp3File = new Mp3File(filePath);
            ID3v1 tags = mp3File.getId3v1Tag();
            addRowToLibraryTable(0,tags.getTitle(), tags.getArtist(), tags.getAlbum(), String.valueOf(mp3File.getLength()),String.valueOf(tags.getGenre()), filePath);
        } catch (IOException | UnsupportedTagException | InvalidDataException ex) {
            Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
                 
    }
    
    private void initTable(){
        
      //model = new DefaultTableModel();
      //scroll = new JScrollPane(tableLibrary);
      tableLibrary.setModel(model);
          
      colmn = tableLibrary.getColumnModel().getColumn(0);
      colmn.setPreferredWidth(10);
      colmn = tableLibrary.getColumnModel().getColumn(1);
      colmn.setPreferredWidth(150);
      colmn = tableLibrary.getColumnModel().getColumn(6);
     // colmn.setMinWidth(0);
      //colmn.setMaxWidth(0);
        
        
        
        tableLibrary.setDropTarget(new DropTarget(){
            @Override
            public synchronized void drop(DropTargetDropEvent dtde) {
                Point point = dtde.getLocation();
                int column = tableLibrary.columnAtPoint(point);
                int row = tableLibrary.rowAtPoint(point);
                
                //JOptionPane.showMessageDialog(rootPane, "Inside");
                 handleDropedFile(dtde);
                super.drop(dtde);
            }
        });
        
        tableScorllPan.setDropTarget(new DropTarget(){
            @Override
            public synchronized void drop(DropTargetDropEvent dtde) {
                handleDropedFile(dtde);
            }
        });
    }
    
    
    private void handleDropedFile(DropTargetDropEvent dtde){
        
        try {
                    // handle drop outside current table
                    //JOptionPane.showMessageDialog(rootPane, "Outside");
                    dtde.acceptDrop(DnDConstants.ACTION_LINK);
                    Transferable t = dtde.getTransferable();
                    List fileList = (List)t.getTransferData(DataFlavor.javaFileListFlavor);
                    for(Object file : fileList){
                        File songFile = (File)file;
                        addRowToLibraryTable(songFile);
                    }
                    File firstSongFile = (File)fileList.get(0);
            
            try ( //Play mp3 file here
                    FileInputStream fis = new FileInputStream(firstSongFile)) {
                myPlayer.stop();
                myPlayer.play(IOUtils.toByteArray(fis));
                
                fis.close();
                //super.drop(dtde);
            }
            } catch (UnsupportedFlavorException | IOException ex) {
                    Logger.getLogger(PlayerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
}
